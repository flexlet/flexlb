// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StartHandlerFunc turns a function with the right signature into a start handler
type StartHandlerFunc func(StartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartHandlerFunc) Handle(params StartParams) middleware.Responder {
	return fn(params)
}

// StartHandler interface for that can handle valid start params
type StartHandler interface {
	Handle(StartParams) middleware.Responder
}

// NewStart creates a new http.Handler for the start operation
func NewStart(ctx *middleware.Context, handler StartHandler) *Start {
	return &Start{Context: ctx, Handler: handler}
}

/* Start swagger:route POST /instances/{name}/start Instance start

Start instance

*/
type Start struct {
	Context *middleware.Context
	Handler StartHandler
}

func (o *Start) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStartParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StartBadRequestBody start bad request body
//
// swagger:model StartBadRequestBody
type StartBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this start bad request body
func (o *StartBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("startBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this start bad request body based on context it is used
func (o *StartBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartBadRequestBody) UnmarshalBinary(b []byte) error {
	var res StartBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StartForbiddenBody start forbidden body
//
// swagger:model StartForbiddenBody
type StartForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this start forbidden body
func (o *StartForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("startForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this start forbidden body based on context it is used
func (o *StartForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartForbiddenBody) UnmarshalBinary(b []byte) error {
	var res StartForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// StartNotFoundBody start not found body
//
// swagger:model StartNotFoundBody
type StartNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this start not found body
func (o *StartNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("startNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *StartNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("startNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this start not found body based on context it is used
func (o *StartNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StartNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
