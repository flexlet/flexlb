// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateHandlerFunc turns a function with the right signature into a create handler
type CreateHandlerFunc func(CreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateHandlerFunc) Handle(params CreateParams) middleware.Responder {
	return fn(params)
}

// CreateHandler interface for that can handle valid create params
type CreateHandler interface {
	Handle(CreateParams) middleware.Responder
}

// NewCreate creates a new http.Handler for the create operation
func NewCreate(ctx *middleware.Context, handler CreateHandler) *Create {
	return &Create{Context: ctx, Handler: handler}
}

/* Create swagger:route POST /instances Instance create

Create Instance

*/
type Create struct {
	Context *middleware.Context
	Handler CreateHandler
}

func (o *Create) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateBadRequestBody create bad request body
//
// swagger:model CreateBadRequestBody
type CreateBadRequestBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create bad request body
func (o *CreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create bad request body based on context it is used
func (o *CreateBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateForbiddenBody create forbidden body
//
// swagger:model CreateForbiddenBody
type CreateForbiddenBody struct {

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this create forbidden body
func (o *CreateForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateForbiddenBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createForbidden"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create forbidden body based on context it is used
func (o *CreateForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateForbiddenBody) UnmarshalBinary(b []byte) error {
	var res CreateForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateNotFoundBody create not found body
//
// swagger:model CreateNotFoundBody
type CreateNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this create not found body
func (o *CreateNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("createNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *CreateNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("createNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create not found body based on context it is used
func (o *CreateNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
